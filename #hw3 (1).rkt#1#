#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 60 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 0 255 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 0 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 164 255 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 164 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 95 109 113 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 95 109 113 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 227 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 227 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 1489 0 31 3 10 #"#lang dssl"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 23 #"#|Cem Ozer && Can Aygen"
0 0 18 29 1 #"\n"
0 0 18 3 17 #"HW3: Binary Heaps"
0 0 18 29 1 #"\n"
0 0 18 3 19 #"EECS 214, Fall 2016"
0 0 18 29 1 #"\n"
0 0 18 29 1 #"\n"
0 0 18 3 49 #"Due: Thursday, November 3, at 11:59 PM, on Canvas"
0 0 18 29 1 #"\n"
0 0 18 29 1 #"\n"
0 0 18 3 57 #"*** You may work on your own or with one (1) partner. ***"
0 0 18 29 1 #"\n"
0 0 18 3 2 #"|#"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 43 #"; An [Ord X] is a function [X X -> Boolean]"
0 0 27 29 1 #"\n"
0 0 18 3 36 #"; Interpretation: a total order on X"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 60
#"; A [Heap-of X] is (make-heap Natural [Ord X] [Vector-of X])"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 13 #"define-struct"
0 0 27 3 1 #" "
0 0 14 3 4 #"heap"
0 0 27 3 2 #" ["
0 0 14 3 4 #"size"
0 0 27 3 1 #" "
0 0 14 3 3 #"lt?"
0 0 27 3 1 #" "
0 0 14 3 4 #"data"
0 0 27 3 2 #"])"
0 0 27 29 1 #"\n"
0 0 18 3 1 #";"
0 0 27 29 1 #"\n"
0 0 18 3 33 #"; Interpretation: Given a heap h,"
0 0 27 29 1 #"\n"
0 0 18 3 55 #"; - (heap-size h) is the number of elements in the heap"
0 0 27 29 1 #"\n"
0 0 18 3 49 #"; - (heap-lt? h) is the ordering used by the heap"
0 0 27 29 1 #"\n"
0 0 18 3 71
(
 #"; - (heap-data h) is a vector containing the heap's elements, where "
 #"the"
) 0 0 27 29 1 #"\n"
0 0 18 3 76
(
 #";   first (heap-size h) elements are an implicit complete binary tre"
 #"e (i.e.,"
) 0 0 27 29 1 #"\n"
0 0 18 3 76
(
 #";   they contain the level-order traversal of the represented tree a"
 #"s we saw"
) 0 0 27 29 1 #"\n"
0 0 18 3 13 #";   in class."
0 0 27 29 1 #"\n"
0 0 18 3 1 #";"
0 0 27 29 1 #"\n"
0 0 18 3 72
(
 #"; Invariant: The implicit tree satisfies the min-heap property; that"
 #" is,"
) 0 0 27 29 1 #"\n"
0 0 18 3 73
(
 #"; if c is the value of some element and p is the value of its parent"
 #" then"
) 0 0 27 29 1 #"\n"
0 0 18 3 29 #";    (not ((heap-lt? h) c p))"
0 0 27 29 1 #"\n"
0 0 18 3 62
#"; must be true. That is, children cannot be less than parents."
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 35 #"; create : N [Ord X] -> [Heap-of X]"
0 0 27 29 1 #"\n"
0 0 18 3 62
#"; Creates a new heap with capacity `capacity` and order `lt?`."
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 6 #"create"
0 0 27 3 1 #" "
0 0 14 3 8 #"capacity"
0 0 27 3 1 #" "
0 0 14 3 3 #"lt?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 9 #"make-heap"
0 0 27 3 1 #" "
0 0 24 3 1 #"0"
0 0 27 3 1 #" "
0 0 14 3 3 #"lt?"
0 0 27 3 2 #" ("
0 0 14 3 11 #"make-vector"
0 0 27 3 1 #" "
0 0 14 3 8 #"capacity"
0 0 27 3 1 #" "
0 0 24 3 6 #"#false"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 33 #"; insert! : [Heap-of X] X -> Void"
0 0 27 29 1 #"\n"
0 0 18 3 28 #"; Adds an element to a heap."
0 0 27 29 1 #"\n"
0 0 18 3 65
#"; Error if the heap has reached capacity and cannot grow further."
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 4 #"heap"
0 0 27 3 1 #" "
0 0 14 3 11 #"new-element"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 5 #"begin"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 14 #"set-heap-data!"
0 0 27 3 1 #" "
0 0 14 3 4 #"heap"
0 0 27 3 2 #" ("
0 0 14 3 9 #"heap-data"
0 0 27 3 2 #" ("
0 0 14 3 12 #"ensure-size!"
0 0 27 3 1 #" "
0 0 14 3 4 #"heap"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 5 #"hset!"
0 0 27 3 1 #" "
0 0 14 3 4 #"heap"
0 0 27 3 2 #" ("
0 0 14 3 9 #"heap-size"
0 0 27 3 1 #" "
0 0 14 3 4 #"heap"
0 0 27 3 2 #") "
0 0 14 3 11 #"new-element"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 10 #"bubble-up!"
0 0 27 3 1 #" "
0 0 14 3 4 #"heap"
0 0 27 3 2 #" ("
0 0 14 3 9 #"heap-size"
0 0 27 3 1 #" "
0 0 14 3 4 #"heap"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 14 #"set-heap-size!"
0 0 27 3 1 #" "
0 0 14 3 4 #"heap"
0 0 27 3 2 #" ("
0 0 14 3 1 #"+"
0 0 27 3 2 #" ("
0 0 14 3 9 #"heap-size"
0 0 27 3 1 #" "
0 0 14 3 4 #"heap"
0 0 27 3 2 #") "
0 0 24 3 1 #"1"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    ))"
0 0 27 29 1 #"\n"
0 0 18 3 56 #";;;; my function is 7 lines (but see helpers below) ;;;;"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 29 #"; find-min : [Heap-of X] -> X"
0 0 27 29 1 #"\n"
0 0 18 3 40 #"; Returns the least element in the heap."
0 0 27 29 1 #"\n"
0 0 18 3 29 #"; Error if the heap is empty."
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 8 #"find-min"
0 0 27 3 1 #" "
0 0 14 3 4 #"heap"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 1 #"="
0 0 27 3 2 #" ("
0 0 14 3 9 #"heap-size"
0 0 27 3 1 #" "
0 0 14 3 4 #"heap"
0 0 27 3 2 #") "
0 0 24 3 1 #"0"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 12 #"\"Heap empty\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 4 #"href"
0 0 27 3 1 #" "
0 0 14 3 4 #"heap"
0 0 27 3 1 #" "
0 0 24 3 1 #"0"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 18 3 32 #";;;; my function is 4 lines ;;;;"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 35 #"; remove-min! : [Heap-of X] -> Void"
0 0 27 29 1 #"\n"
0 0 18 3 40 #"; Removes the least element in the heap."
0 0 27 29 1 #"\n"
0 0 18 3 29 #"; Error if the heap is empty."
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 11 #"remove-min!"
0 0 27 3 1 #" "
0 0 14 3 4 #"heap"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    (("
0 0 14 3 1 #"="
0 0 27 3 2 #" ("
0 0 14 3 9 #"heap-size"
0 0 27 3 1 #" "
0 0 14 3 4 #"heap"
0 0 27 3 2 #") "
0 0 24 3 1 #"0"
0 0 27 3 3 #") ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 12 #"\"Heap empty\""
0 0 27 3 3 #" ))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 16 3 5 #"begin"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"           ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"ret"
0 0 27 3 2 #" ("
0 0 14 3 4 #"href"
0 0 27 3 1 #" "
0 0 14 3 4 #"heap"
0 0 27 3 1 #" "
0 0 24 3 1 #"0"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"           ("
0 0 14 3 5 #"hset!"
0 0 27 3 1 #" "
0 0 14 3 4 #"heap"
0 0 27 3 1 #" "
0 0 24 3 1 #"0"
0 0 27 3 2 #" ("
0 0 14 3 4 #"href"
0 0 27 3 1 #" "
0 0 14 3 4 #"heap"
0 0 27 3 2 #" ("
0 0 14 3 1 #"-"
0 0 27 3 2 #" ("
0 0 14 3 9 #"heap-size"
0 0 27 3 1 #" "
0 0 14 3 4 #"heap"
0 0 27 3 2 #") "
0 0 24 3 1 #"2"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"           ("
0 0 14 3 15 #"percolate-down!"
0 0 27 3 1 #" "
0 0 14 3 4 #"heap"
0 0 27 3 1 #" "
0 0 24 3 1 #"0"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"           ("
0 0 14 3 5 #"hset!"
0 0 27 3 1 #" "
0 0 14 3 4 #"heap"
0 0 27 3 2 #" ("
0 0 14 3 1 #"-"
0 0 27 3 2 #" ("
0 0 14 3 9 #"heap-size"
0 0 27 3 1 #" "
0 0 14 3 4 #"heap"
0 0 27 3 2 #") "
0 0 24 3 1 #"2"
0 0 27 3 2 #") "
0 0 24 3 6 #"#false"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"           ))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 56 #";;;; my function is 9 lines (but see helpers below) ;;;;"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 4 #";;;;"
0 0 27 29 1 #"\n"
0 0 18 3 20 #";;;; PRIVATE HELPERS"
0 0 27 29 1 #"\n"
0 0 18 3 4 #";;;;"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 4 #";;;;"
0 0 27 29 1 #"\n"
0 0 18 3 68
#";;;; Below are the helpers that I used to implement my solution. You"
0 0 27 29 1 #"\n"
0 0 18 3 65
(
 #";;;; needn\342\200\231t use the same design that I did, but they may"
 #" help."
) 0 0 27 29 1 #"\n"
0 0 18 3 4 #";;;;"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 24 #"; A [Maybe X] is one of:"
0 0 27 29 1 #"\n"
0 0 18 3 11 #"; -- #false"
0 0 27 29 1 #"\n"
0 0 18 3 6 #"; -- X"
0 0 27 29 1 #"\n"
0 0 18 3 42 #"; Interpretation: maybe an X, or maybe not"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 33 #"; N is the set of natural numbers"
0 0 27 29 1 #"\n"
0 0 18 3 36 #"; N+ is the set of positive integers"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 43 #"; heap:ensure-size! : [Heap-of X] N -> Void"
0 0 27 29 1 #"\n"
0 0 18 3 73
(
 #"; Ensures that the heap has room for `size` elements by throwing an "
 #"error"
) 0 0 27 29 1 #"\n"
0 0 18 3 16 #"; if it doesn't."
0 0 27 29 1 #"\n"
0 0 18 3 25 #";(define (ensure-size! h)"
0 0 27 29 1 #"\n"
0 0 18 3 83
(
 #";  (if (> (vector-length (heap-data h)) (heap-size h)) #t (error \"C"
 #"apacity full\")))"
) 0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 12 #"ensure-size!"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 1 #">"
0 0 27 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 27 3 2 #" ("
0 0 14 3 9 #"heap-data"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 4 #")) ("
0 0 14 3 9 #"heap-size"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"      "
0 0 14 3 1 #"h"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 16 3 5 #"begin"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"new"
0 0 27 3 2 #" ("
0 0 14 3 6 #"create"
0 0 27 3 2 #" ("
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 24 3 1 #"2"
0 0 27 3 2 #" ("
0 0 14 3 9 #"heap-size"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 4 #")) ("
0 0 14 3 8 #"heap-lt?"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 14 3 14 #"set-heap-size!"
0 0 27 3 1 #" "
0 0 14 3 3 #"new"
0 0 27 3 2 #" ("
0 0 14 3 9 #"heap-size"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 16 3 3 #"let"
0 0 27 3 1 #" "
0 0 14 3 4 #"copy"
0 0 27 3 3 #" (["
0 0 14 3 1 #"i"
0 0 27 3 1 #" "
0 0 24 3 1 #"0"
0 0 27 3 2 #"])"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 2 #">="
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 2 #" ("
0 0 14 3 9 #"heap-size"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 3 #")) "
0 0 14 3 3 #"new"
0 0 27 3 2 #" ("
0 0 16 3 5 #"begin"
0 0 27 29 1 #"\n"
0 0 27 3 44 #"                                           ("
0 0 14 3 5 #"hset!"
0 0 27 3 1 #" "
0 0 14 3 3 #"new"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 2 #" ("
0 0 14 3 4 #"href"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 44 #"                                           ("
0 0 14 3 4 #"copy"
0 0 27 3 2 #" ("
0 0 14 3 1 #"+"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 8 #"))))))))"
0 0 27 29 1 #"\n"
0 0 18 3 32 #";;;; my function is 3 lines ;;;;"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 46 #"; heap:percolate-down! : [Heap-of X] N -> Void"
0 0 27 29 1 #"\n"
0 0 18 3 76
(
 #"; Restores the heap invariant by percolating down, starting with the"
 #" element"
) 0 0 27 29 1 #"\n"
0 0 18 3 13 #"; at `index`."
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 15 #"percolate-down!"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 9 #"schildind"
0 0 27 3 2 #" ("
0 0 14 3 18 #"find-smaller-child"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 3 #"not"
0 0 27 3 3 #"  ("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 14 3 9 #"schildind"
0 0 27 3 1 #" "
0 0 24 3 2 #"#f"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 1 #">"
0 0 27 3 2 #" ("
0 0 14 3 4 #"href"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 3 #") ("
0 0 14 3 4 #"href"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 1 #" "
0 0 14 3 9 #"schildind"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 16 3 5 #"begin"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 14 3 10 #"bubble-up!"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 1 #" "
0 0 14 3 9 #"schildind"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 14 3 15 #"percolate-down!"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 1 #" "
0 0 14 3 9 #"schildind"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 14 3 4 #"void"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 4 #"void"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 18 3 32 #";;;; my function is 8 lines ;;;;"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 54 #"; heap:find-smaller-child : [Heap-of X] N -> [Maybe N]"
0 0 27 29 1 #"\n"
0 0 18 3 70
(
 #"; Finds the index of the smaller child of node `index`, or `#false` "
 #"if"
) 0 0 27 29 1 #"\n"
0 0 18 3 21 #"; it has no children."
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 18 #"find-smaller-child"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 2 #">="
0 0 27 3 2 #" ("
0 0 14 3 4 #"left"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 2 #")("
0 0 14 3 9 #"heap-size"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 1 #" "
0 0 24 3 1 #"0"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 1 #"<"
0 0 27 3 2 #" ("
0 0 14 3 5 #"right"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 2 #")("
0 0 14 3 9 #"heap-size"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 4 #")) ("
0 0 14 3 2 #"<="
0 0 27 3 2 #" ("
0 0 14 3 4 #"href"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 2 #" ("
0 0 14 3 5 #"right"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 3 #"))("
0 0 14 3 4 #"href"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 2 #" ("
0 0 14 3 4 #"left"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 14 3 5 #"right"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 14 3 4 #"left"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 18 3 32 #";;;; my function is 9 lines ;;;;"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 7 #";; DONE"
0 0 27 29 1 #"\n"
0 0 18 3 41 #"; heap:bubble-up! : [Heap-of X] N -> Void"
0 0 27 29 1 #"\n"
0 0 18 3 68
#"; Restores the heap invariant by bubbling up the element at `index`."
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 10 #"bubble-up!"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    (("
0 0 14 3 1 #"="
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #" "
0 0 24 3 1 #"0"
0 0 27 3 3 #") ("
0 0 14 3 4 #"void"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    (("
0 0 14 3 4 #"hlt?"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 2 #" ("
0 0 14 3 6 #"parent"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 2 #") "
0 0 14 3 1 #"i"
0 0 27 3 3 #") ("
0 0 14 3 4 #"void"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 5 #"begin"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 5 #"swap!"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 2 #" ("
0 0 14 3 6 #"parent"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 10 #"bubble-up!"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 2 #" ("
0 0 14 3 6 #"parent"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 6 #"))))))"
0 0 27 29 1 #"\n"
0 0 18 3 32 #";;;; my function is 6 lines ;;;;"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 7 #";; DONE"
0 0 27 29 1 #"\n"
0 0 18 3 31 #"; heap:ref : [Heap-of X] N -> X"
0 0 27 29 1 #"\n"
0 0 18 3 35 #"; Gets the heap element at `index`."
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 4 #"href"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 10 #"vector-ref"
0 0 27 3 2 #" ("
0 0 14 3 9 #"heap-data"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 2 #") "
0 0 14 3 1 #"i"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 18 3 32 #";;;; my function is 2 lines ;;;;"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 7 #";; DONE"
0 0 27 29 1 #"\n"
0 0 18 3 37 #"; heap:set! : [Heap-of X] N X -> Void"
0 0 27 29 1 #"\n"
0 0 18 3 35 #"; Sets the heap element at `index`."
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 5 #"hset!"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #" "
0 0 14 3 7 #"element"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 11 #"vector-set!"
0 0 27 3 2 #" ("
0 0 14 3 9 #"heap-data"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 2 #") "
0 0 14 3 1 #"i"
0 0 27 3 1 #" "
0 0 14 3 7 #"element"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 18 3 32 #";;;; my function is 2 lines ;;;;"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 7 #";; DONE"
0 0 27 29 1 #"\n"
0 0 18 3 38 #"; heap:swap! : [Heap-of X] N N -> Void"
0 0 27 29 1 #"\n"
0 0 18 3 49 #"; Swaps the heap elements at indices `i` and `j`."
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 5 #"swap!"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #" "
0 0 14 3 1 #"j"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"temp"
0 0 27 3 1 #" "
0 0 24 3 1 #"0"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 5 #"begin"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 27 3 1 #" "
0 0 14 3 4 #"temp"
0 0 27 3 2 #" ("
0 0 14 3 4 #"href"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 5 #"hset!"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 2 #" ("
0 0 14 3 4 #"href"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 1 #" "
0 0 14 3 1 #"j"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 5 #"hset!"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 1 #" "
0 0 14 3 1 #"j"
0 0 27 3 1 #" "
0 0 14 3 4 #"temp"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 7 #";; DONE"
0 0 27 29 1 #"\n"
0 0 18 3 39 #"; heap:lt? : [Heap-of X] N N -> Boolean"
0 0 27 29 1 #"\n"
0 0 18 3 68
#"; Returns whether the element at `i` is less than the element at `j`"
0 0 27 29 1 #"\n"
0 0 18 3 25 #"; using the heap's order."
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 4 #"hlt?"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #" "
0 0 14 3 1 #"j"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"  (("
0 0 14 3 8 #"heap-lt?"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 3 #") ("
0 0 14 3 4 #"href"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 3 #") ("
0 0 14 3 4 #"href"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 1 #" "
0 0 14 3 1 #"j"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 18 3 32 #";;;; my function is 2 lines ;;;;"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 7 #";; DONE"
0 0 27 29 1 #"\n"
0 0 18 3 21 #"; heap:left : N -> N+"
0 0 27 29 1 #"\n"
0 0 18 3 58
#"; Computes the index of the left child of the given index."
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 4 #"left"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 27 3 2 #" ("
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #" "
0 0 24 3 1 #"2"
0 0 27 3 2 #") "
0 0 24 3 1 #"1"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 18 3 32 #";;;; my function is 2 lines ;;;;"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 7 #";; DONE"
0 0 27 29 1 #"\n"
0 0 18 3 22 #"; heap:right : N -> N+"
0 0 27 29 1 #"\n"
0 0 18 3 58
#"; Computes the index of the left child of the given index."
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 5 #"right"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 27 3 2 #" ("
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #" "
0 0 24 3 1 #"2"
0 0 27 3 2 #") "
0 0 24 3 1 #"2"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 18 3 32 #";;;; my function is 2 lines ;;;;"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 7 #";; DONE"
0 0 27 29 1 #"\n"
0 0 18 3 23 #"; heap:parent : N+ -> N"
0 0 27 29 1 #"\n"
0 0 18 3 54 #"; Computes the index of the parent of the given index."
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 6 #"parent"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 5 #"floor"
0 0 27 3 2 #" ("
0 0 14 3 1 #"/"
0 0 27 3 2 #" ("
0 0 14 3 1 #"-"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 2 #") "
0 0 24 3 1 #"2"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 18 3 32 #";;;; my function is 2 lines ;;;;"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 14 #";;example heap"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"hex"
0 0 27 3 2 #" ("
0 0 14 3 6 #"create"
0 0 27 3 1 #" "
0 0 24 3 2 #"12"
0 0 27 3 1 #" "
0 0 14 3 1 #"<"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 3 #"hex"
0 0 27 3 1 #" "
0 0 24 3 1 #"0"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 3 #"hex"
0 0 27 3 1 #" "
0 0 24 3 1 #"2"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 3 #"hex"
0 0 27 3 1 #" "
0 0 24 3 1 #"4"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 3 #"hex"
0 0 27 3 1 #" "
0 0 24 3 1 #"6"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 3 #"hex"
0 0 27 3 1 #" "
0 0 24 3 1 #"8"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 3 #"hex"
0 0 27 3 1 #" "
0 0 24 3 2 #"10"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 3 #"hex"
0 0 27 3 1 #" "
0 0 24 3 2 #"12"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 3 #"hex"
0 0 27 3 1 #" "
0 0 24 3 2 #"14"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 3 #"hex"
0 0 27 3 1 #" "
0 0 24 3 2 #"16"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 3 #"hex"
0 0 27 3 1 #" "
0 0 24 3 2 #"18"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 3 #"hex"
0 0 27 3 1 #" "
0 0 24 3 2 #"19"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"hev"
0 0 27 3 2 #" ("
0 0 14 3 6 #"create"
0 0 27 3 1 #" "
0 0 24 3 2 #"10"
0 0 27 3 1 #" "
0 0 14 3 1 #"<"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 3 #"hev"
0 0 27 3 1 #" "
0 0 24 3 1 #"0"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 3 #"hev"
0 0 27 3 1 #" "
0 0 24 3 1 #"2"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 3 #"hev"
0 0 27 3 1 #" "
0 0 24 3 1 #"4"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 3 #"hev"
0 0 27 3 1 #" "
0 0 24 3 1 #"6"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 3 #"hev"
0 0 27 3 1 #" "
0 0 24 3 1 #"8"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 3 #"hev"
0 0 27 3 1 #" "
0 0 24 3 2 #"10"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"hez"
0 0 27 3 2 #" ("
0 0 14 3 4 #"heap"
0 0 27 3 1 #" "
0 0 24 3 2 #"10"
0 0 27 3 1 #" "
0 0 14 3 1 #"<"
0 0 27 3 3 #"  ("
0 0 14 3 6 #"vector"
0 0 27 3 1 #" "
0 0 24 3 1 #"0"
0 0 27 3 1 #" "
0 0 24 3 1 #"2"
0 0 27 3 1 #" "
0 0 24 3 1 #"4"
0 0 27 3 1 #" "
0 0 24 3 1 #"6"
0 0 27 3 1 #" "
0 0 24 3 1 #"8"
0 0 27 3 1 #" "
0 0 24 3 2 #"10"
0 0 27 3 1 #" "
0 0 24 3 2 #"12"
0 0 27 3 1 #" "
0 0 24 3 2 #"14"
0 0 27 3 1 #" "
0 0 24 3 2 #"16"
0 0 27 3 1 #" "
0 0 24 3 2 #"18"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 18 3 29 #";;;;;;;;Check-Expects;;;;;;;;"
0 0 27 29 1 #"\n"
0 0 18 3 33 #";;check create capacity ==== PASS"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 2 #"h1"
0 0 27 3 2 #" ("
0 0 14 3 6 #"create"
0 0 27 3 1 #" "
0 0 24 3 1 #"5"
0 0 27 3 1 #" "
0 0 14 3 1 #"<"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 9 #"heap-data"
0 0 27 3 1 #" "
0 0 14 3 2 #"h1"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"              ("
0 0 14 3 6 #"vector"
0 0 27 3 1 #" "
0 0 24 3 2 #"#f"
0 0 27 3 1 #" "
0 0 24 3 2 #"#f"
0 0 27 3 1 #" "
0 0 24 3 2 #"#f"
0 0 27 3 1 #" "
0 0 24 3 2 #"#f"
0 0 27 3 1 #" "
0 0 24 3 2 #"#f"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 9 #"heap-size"
0 0 27 3 1 #" "
0 0 14 3 2 #"h1"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"              "
0 0 24 3 1 #"0"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 18 3 33 #";;check insert!         ==== PASS"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 16 3 5 #"begin"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 2 #"h1"
0 0 27 3 1 #" "
0 0 24 3 2 #"20"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 5 #";; 20"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 6 #";;{20}"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 2 #"h1"
0 0 27 3 1 #" "
0 0 24 3 2 #"30"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 6 #";;  20"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 4 #";; /"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 4 #";;30"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 9 #";;{20,30}"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 2 #"h1"
0 0 27 3 1 #" "
0 0 24 3 2 #"40"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 6 #";;  20"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 7 #";; /  \\"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 9 #";;30   40"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 12 #";;{20,30,40}"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 2 #"h1"
0 0 27 3 1 #" "
0 0 24 3 1 #"5"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 8 #";;    20"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 9 #";;   /  \\"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 10 #";;  30  40"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 4 #";; /"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 3 #";;5"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 14 #";;{20,30,40,5}"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 9 #";;becomes"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 7 #";;    5"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 8 #";;   / \\"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 9 #";;  20 40"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 4 #";; /"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 4 #";;30"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 14 #";;{5,20,40,30}"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 2 #"h1"
0 0 27 3 1 #" "
0 0 24 3 1 #"3"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 28 #";;just like above it becomes"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 7 #";;    3"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 8 #";;   / \\"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 10 #";;  5   40"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 6 #";; / \\"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 8 #";;30  20"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 18 3 16 #";;{3,5,40,30,20}"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 14 3 9 #"heap-data"
0 0 27 3 1 #" "
0 0 14 3 2 #"h1"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"              ("
0 0 14 3 6 #"vector"
0 0 27 3 1 #" "
0 0 24 3 1 #"3"
0 0 27 3 1 #" "
0 0 24 3 1 #"5"
0 0 27 3 1 #" "
0 0 24 3 2 #"40"
0 0 27 3 1 #" "
0 0 24 3 2 #"30"
0 0 27 3 1 #" "
0 0 24 3 2 #"20"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 18 3 33 #";;check find-min        ==== PASS"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 16 3 5 #"begin"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 2 #"h1"
0 0 27 3 1 #" "
0 0 24 3 2 #"20"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 2 #"h1"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 2 #"h1"
0 0 27 3 1 #" "
0 0 24 3 1 #"2"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 2 #"h1"
0 0 27 3 1 #" "
0 0 24 3 2 #"54"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 14 3 8 #"find-min"
0 0 27 3 1 #" "
0 0 14 3 2 #"h1"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"              "
0 0 24 3 1 #"1"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 18 3 31 #";;check remove-min!      ==== X"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 16 3 5 #"begin"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 2 #"h1"
0 0 27 3 1 #" "
0 0 24 3 2 #"20"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 2 #"h1"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 2 #"h1"
0 0 27 3 1 #" "
0 0 24 3 1 #"2"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 14 3 7 #"insert!"
0 0 27 3 1 #" "
0 0 14 3 2 #"h1"
0 0 27 3 1 #" "
0 0 24 3 2 #"54"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 14 3 11 #"remove-min!"
0 0 27 3 1 #" "
0 0 14 3 2 #"h1"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 14 3 9 #"heap-data"
0 0 27 3 1 #" "
0 0 14 3 2 #"h1"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"              ("
0 0 14 3 6 #"vector"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 1 #" "
0 0 24 3 1 #"2"
0 0 27 3 1 #" "
0 0 24 3 2 #"20"
0 0 27 3 1 #" "
0 0 24 3 2 #"54"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 18 3 30 #";;check percolate-down! ==== X"
0 0 27 29 1 #"\n"
0 0 18 3 30 #";;check extra credit    ==== X"
0           0
