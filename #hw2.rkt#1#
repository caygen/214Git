#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 63 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 148 0 211 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 0 1
#"\0"
0 -1 1 #"\0"
0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 1279 0 29 3 10 #"#lang dssl"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 24 #"#| Cem Ozer && Can Aygen"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"HW2: Graphs"
0 0 17 29 1 #"\n"
0 0 17 3 46 #"Due: Thursday, Oct. 27 at 11:59 PM, via Canvas"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 55 #"** You may work on your own or with one (1) partner. **"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 25 29 1 #"\n"
0 0 17 3 18 #";;; REPRESENTATION"
0 0 25 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 20 #";; Vertex is Natural"
0 0 25 29 1 #"\n"
0 0 17 3 19 #";; Weight is Number"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 25 #";; MaybeWeight is one of:"
0 0 25 29 1 #"\n"
0 0 17 3 12 #";; -- Weight"
0 0 25 29 1 #"\n"
0 0 17 3 12 #";; -- #false"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 50 #";; A WUGraph is [FILL IN YOUR REPRESENTATION HERE]"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 25 3 1 #" "
0 0 14 3 7 #"WUGraph"
0 0 25 3 2 #" ["
0 0 14 3 11 #"vertex-list"
0 0 25 3 2 #"])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 25 29 1 #"\n"
0 0 17 3 18 #";;; GRAPH EXAMPLES"
0 0 25 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 17 #";; FILL THESE IN:"
0 0 25 29 1 #"\n"
0 0 17 3 44 #";; either adjacency list or adjecency matrix"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 6 #"GRAPH1"
0 0 25 3 2 #" ("
0 0 14 3 7 #"WUGraph"
0 0 25 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 25 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 33 #"                                ("
0 0 14 3 6 #"vector"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 33 #"                                ("
0 0 14 3 6 #"vector"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 33 #"                                ("
0 0 14 3 6 #"vector"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                         "
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 6 #"GRAPH2"
0 0 25 3 2 #" ("
0 0 14 3 7 #"WUGraph"
0 0 25 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 25 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 33 #"                                ("
0 0 14 3 6 #"vector"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 33 #"                                ("
0 0 14 3 6 #"vector"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 33 #"                                ("
0 0 14 3 6 #"vector"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 33 #"                                ("
0 0 14 3 6 #"vector"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 33 #"                                ("
0 0 14 3 6 #"vector"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 25 29 1 #"\n"
0 0 17 3 20 #";;; GRAPH OPERATIONS"
0 0 25 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 34 #";; make-graph : Natural -> WUGraph"
0 0 25 29 1 #"\n"
0 0 17 3 61
#";; Creates a new graph with the specified number of vertices."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"make-graph"
0 0 25 3 1 #" "
0 0 14 3 4 #"size"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"WUGraph"
0 0 25 3 2 #" ("
0 0 14 3 12 #"build-vector"
0 0 25 3 1 #" "
0 0 14 3 4 #"size"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 11 #"make-vector"
0 0 25 3 1 #" "
0 0 14 3 4 #"size"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 10 #";; DONE!!!"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 56 #";; set-edge! : WUGraph Vertex Vertex MaybeWeight -> Void"
0 0 25 29 1 #"\n"
0 0 17 3 69
(
 #";; Sets the edge (i, j) to have weight `weight`, where `#false` mean"
 #"s"
) 0 0 25 29 1 #"\n"
0 0 17 3 41 #";;; there is no edge between `i` and `j`."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"set-edge!"
0 0 25 3 1 #" "
0 0 14 3 5 #"graph"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 14 3 1 #"j"
0 0 25 3 1 #" "
0 0 14 3 6 #"weight"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 11 #"vector-set!"
0 0 25 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 25 3 2 #" ("
0 0 14 3 19 #"WUGraph-vertex-list"
0 0 25 3 1 #" "
0 0 14 3 5 #"graph"
0 0 25 3 2 #") "
0 0 14 3 1 #"i"
0 0 25 3 2 #") "
0 0 14 3 1 #"j"
0 0 25 3 1 #" "
0 0 14 3 6 #"weight"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 11 #"vector-set!"
0 0 25 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 25 3 2 #" ("
0 0 14 3 19 #"WUGraph-vertex-list"
0 0 25 3 1 #" "
0 0 14 3 5 #"graph"
0 0 25 3 2 #") "
0 0 14 3 1 #"j"
0 0 25 3 2 #") "
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 14 3 6 #"weight"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 17 3 3 #";  "
0 0 25 29 1 #"\n"
0 0 17 3 5 #";    "
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 25 29 1 #"\n"
0 0 17 3 10 #";; DONE!!!"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 34 #";; graph-size : WUGraph -> Natural"
0 0 25 29 1 #"\n"
0 0 17 3 69
(
 #";; Returns the number of vertices in the graph. This should always b"
 #"e"
) 0 0 25 29 1 #"\n"
0 0 17 3 52 #";; the same as the parameter passed to `make-graph`."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"graph-size"
0 0 25 3 1 #" "
0 0 14 3 5 #"graph"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 13 #"vector-length"
0 0 25 3 2 #" ("
0 0 14 3 19 #"WUGraph-vertex-list"
0 0 25 3 1 #" "
0 0 14 3 5 #"graph"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 17 3 10 #";; DONE!!!"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 50 #";; get-edge : WUGraph Vertex Vertex -> MaybeWeight"
0 0 25 29 1 #"\n"
0 0 17 3 67
#";; Gets the weight of the edge between vertices `i` or `j`; returns"
0 0 25 29 1 #"\n"
0 0 17 3 35 #";; #false if there is no such edge."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"get-edge"
0 0 25 3 1 #" "
0 0 14 3 5 #"graph"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 14 3 1 #"j"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 10 #"vector-ref"
0 0 25 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 25 3 2 #" ("
0 0 14 3 19 #"WUGraph-vertex-list"
0 0 25 3 1 #" "
0 0 14 3 5 #"graph"
0 0 25 3 2 #") "
0 0 14 3 1 #"i"
0 0 25 3 2 #") "
0 0 14 3 1 #"j"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 17 3 10 #";; DONE!!!"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 67
#";; The following function uses this data definition for its result:"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 32 #";; A [List-of Vertex] is one of:"
0 0 25 29 1 #"\n"
0 0 17 3 9 #";; -- '()"
0 0 25 29 1 #"\n"
0 0 17 3 36 #";; -- (cons Vertex [List-of Vertex])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 52 #";; get-adjacent : WUGraph Vertex -> [List-of Vertex]"
0 0 25 29 1 #"\n"
0 0 17 3 96
(
 #";; Returns a list of all vertices adjacent to vertex `i`. The order "
 #"of (cons curr adjacent-list)"
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 25 #";; the list is arbitrary."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"get-adjacent"
0 0 25 3 1 #" "
0 0 14 3 5 #"graph"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 13 #"adjacent-list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 3 #"())"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"index"
0 0 25 3 1 #" "
0 0 22 3 2 #"-1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"for"
0 0 25 3 4 #"  (["
0 0 14 3 4 #"curr"
0 0 25 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 25 3 2 #" ("
0 0 14 3 19 #"WUGraph-vertex-list"
0 0 25 3 1 #" "
0 0 14 3 5 #"graph"
0 0 25 3 2 #") "
0 0 14 3 1 #"i"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 5 #"index"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 5 #"index"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 6 #"false?"
0 0 25 3 1 #" "
0 0 14 3 4 #"curr"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 13 #"adjacent-list"
0 0 25 3 2 #" ("
0 0 14 3 6 #"append"
0 0 25 3 1 #" "
0 0 14 3 13 #"adjacent-list"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 5 #"index"
0 0 25 3 5 #"))) ("
0 0 14 3 4 #"void"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 14 3 13 #"adjacent-list"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 10 #";; DONE!!!"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 25 29 1 #"\n"
0 0 17 3 7 #";;; DFS"
0 0 25 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 37 #";; WUGraph Vertex -> [List-of Vertex]"
0 0 25 29 1 #"\n"
0 0 17 3 66
#";; Performs a depth-first search starting at `start` and returns a"
0 0 25 29 1 #"\n"
0 0 17 3 34 #";; list of all reachable vertices."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 3 #"dfs"
0 0 25 3 1 #" "
0 0 14 3 5 #"graph"
0 0 25 3 1 #" "
0 0 14 3 5 #"start"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 12 #"visited-list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 3 #"())"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"unless"
0 0 25 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 25 3 2 #" ("
0 0 14 3 10 #"graph-size"
0 0 25 3 1 #" "
0 0 14 3 5 #"graph"
0 0 25 3 2 #")("
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 12 #"visited-list"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 1 #" "
0 0 14 3 4 #"loop"
0 0 25 3 2 #"(("
0 0 14 3 4 #"curr"
0 0 25 3 1 #" "
0 0 14 3 5 #"start"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 12 #"visited-list"
0 0 25 3 2 #" ("
0 0 14 3 6 #"append"
0 0 25 3 1 #" "
0 0 14 3 12 #"visited-list"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 4 #"curr"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 15 3 3 #"for"
0 0 25 3 4 #"  (["
0 0 14 3 1 #"i"
0 0 25 3 2 #" ("
0 0 14 3 12 #"get-adjacent"
0 0 25 3 1 #" "
0 0 14 3 5 #"graph"
0 0 25 3 1 #" "
0 0 14 3 4 #"curr"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 1 #"("
0 0 14 3 6 #"member"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 14 3 12 #"visited-list"
0 0 25 3 3 #"))("
0 0 14 3 4 #"loop"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 2 #")("
0 0 14 3 4 #"void"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"            "
0 0 17 3 78
(
 #";;(display visited-list)(newline)(display start)(newline)(newline) ;"
 #";debugging"
) 0 0 25 29 1 #"\n"
0 0 25 3 13 #"            )"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 14 3 12 #"visited-list"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 25 29 1 #"\n"
0 0 17 3 3 #";  "
0 0 25 29 1 #"\n"
0 0 17 3 4 #";;;;"
0 0 25 29 1 #"\n"
0 0 17 3 11 #";;; TESTING"
0 0 25 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 71
(
 #";; You should test your code thoroughly. Here are some tests to get "
 #"you"
) 0 0 25 29 1 #"\n"
0 0 17 3 50 #";; started, which you should uncomment when ready:"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"graph-size"
0 0 25 3 1 #" "
0 0 14 3 6 #"GRAPH1"
0 0 25 3 2 #") "
0 0 22 3 1 #"4"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"graph-size"
0 0 25 3 1 #" "
0 0 14 3 6 #"GRAPH2"
0 0 25 3 2 #") "
0 0 22 3 1 #"6"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 8 #"get-edge"
0 0 25 3 1 #" "
0 0 14 3 6 #"GRAPH1"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #") "
0 0 22 3 1 #"2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 8 #"get-edge"
0 0 25 3 1 #" "
0 0 14 3 6 #"GRAPH1"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #") "
0 0 22 3 6 #"#false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 12 #"get-adjacent"
0 0 25 3 1 #" "
0 0 14 3 6 #"GRAPH1"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 12 #"get-adjacent"
0 0 25 3 1 #" "
0 0 14 3 6 #"GRAPH2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"graph"
0 0 25 3 2 #" ("
0 0 14 3 10 #"make-graph"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 9 #"set-edge!"
0 0 25 3 1 #" "
0 0 14 3 5 #"graph"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 8 #"get-edge"
0 0 25 3 1 #" "
0 0 14 3 5 #"graph"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 8 #"get-edge"
0 0 25 3 1 #" "
0 0 14 3 5 #"graph"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 8 #"get-edge"
0 0 25 3 1 #" "
0 0 14 3 5 #"graph"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 22 3 6 #"#false"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 51 #";; DFS tests---see below for explanation of `sort`."
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"sort"
0 0 25 3 2 #" ("
0 0 14 3 3 #"dfs"
0 0 25 3 1 #" "
0 0 14 3 6 #"GRAPH1"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"sort"
0 0 25 3 2 #" ("
0 0 14 3 3 #"dfs"
0 0 25 3 1 #" "
0 0 14 3 6 #"GRAPH1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"sort"
0 0 25 3 2 #" ("
0 0 14 3 3 #"dfs"
0 0 25 3 1 #" "
0 0 14 3 6 #"GRAPH2"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"sort"
0 0 25 3 2 #" ("
0 0 14 3 3 #"dfs"
0 0 25 3 1 #" "
0 0 14 3 6 #"GRAPH2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"sort"
0 0 25 3 2 #" ("
0 0 14 3 3 #"dfs"
0 0 25 3 1 #" "
0 0 14 3 6 #"GRAPH2"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"graph"
0 0 25 3 2 #" ("
0 0 14 3 10 #"make-graph"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 9 #"set-edge!"
0 0 25 3 1 #" "
0 0 14 3 5 #"graph"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 4 #"sort"
0 0 25 3 2 #" ("
0 0 14 3 3 #"dfs"
0 0 25 3 1 #" "
0 0 14 3 5 #"graph"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 25 29 1 #"\n"
0 0 17 3 19 #";;; TESTING HELPERS"
0 0 25 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 67
#";; The following function may be convenient for creating graphs for"
0 0 25 29 1 #"\n"
0 0 17 3 70
(
 #";; tests. It uses the graph API that you are defining above, so if y"
 #"ou"
) 0 0 25 29 1 #"\n"
0 0 17 3 63
#";; define make-graph and set-edge! correctly then it will work."
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 67
#";; build-graph : N [List-of (list Vertex Vertex Weight)] -> WUGraph"
0 0 25 29 1 #"\n"
0 0 17 3 64
#";; Returns a new graph of n vertices containing the given edges."
0 0 25 29 1 #"\n"
0 0 17 3 30 #";(define (build-graph n edges)"
0 0 25 29 1 #"\n"
0 0 17 3 45 #";  (local [(define new-graph (make-graph n))]"
0 0 25 29 1 #"\n"
0 0 17 3 11 #";    (begin"
0 0 25 29 1 #"\n"
0 0 17 3 26 #";      (map (lambda (edge)"
0 0 25 29 1 #"\n"
0 0 17 3 76
(
 #";             (set-edge! new-graph (first edge) (second edge) (third"
 #" edge)))"
) 0 0 25 29 1 #"\n"
0 0 17 3 18 #";           edges)"
0 0 25 29 1 #"\n"
0 0 17 3 19 #";      new-graph)))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 57 #";; Here's an example using build-graph to create a graph:"
0 0 25 29 1 #"\n"
0 0 17 3 15 #";(define GRAPH3"
0 0 25 29 1 #"\n"
0 0 17 3 17 #";  (build-graph 6"
0 0 25 29 1 #"\n"
0 0 17 3 25 #";               '((0 1 5)"
0 0 25 29 1 #"\n"
0 0 17 3 25 #";                 (0 2 7)"
0 0 25 29 1 #"\n"
0 0 17 3 25 #";                 (0 3 2)"
0 0 25 29 1 #"\n"
0 0 17 3 25 #";                 (1 4 9)"
0 0 25 29 1 #"\n"
0 0 17 3 25 #";                 (1 5 6)"
0 0 25 29 1 #"\n"
0 0 17 3 25 #";                 (3 5 0)"
0 0 25 29 1 #"\n"
0 0 17 3 28 #";                 (3 4 1))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 67
#";; DFS returns the list of nodes visited, but not in any particular"
0 0 25 29 1 #"\n"
0 0 17 3 68
#";; order, which makes it difficult to test. One way to test it is to"
0 0 25 29 1 #"\n"
0 0 17 3 67
#";; sort the resulting list and compare to the result we expect from"
0 0 25 29 1 #"\n"
0 0 17 3 67
#";; that. For example, suppose we have a graph where the DFS reaches"
0 0 25 29 1 #"\n"
0 0 17 3 71
(
 #";; vertices 1, 2, and 3. Then the result of `dfs` could be (list 1 2"
 #" 3)"
) 0 0 25 29 1 #"\n"
0 0 17 3 69
(
 #";; or (list 2 1 3) or (list 3 1 2) etc. However, if we sort that the"
 #"n"
) 0 0 25 29 1 #"\n"
0 0 17 3 54 #";; the result of *that* should always be (list 1 2 3)."
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 39 #";; [List-of Number] -> [List-of Number]"
0 0 25 29 1 #"\n"
0 0 17 3 27 #";; Sorts a list of numbers."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"sort"
0 0 25 3 1 #" "
0 0 14 3 3 #"lst"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 2 #"or"
0 0 25 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 3 #"lst"
0 0 25 3 3 #") ("
0 0 14 3 6 #"empty?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 3 #"lst"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 14 3 3 #"lst"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"pivot"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 3 #"lst"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"non-pivot"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 3 #"lst"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 6 #"before"
0 0 25 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 5 #"pivot"
0 0 25 3 3 #")) "
0 0 14 3 9 #"non-pivot"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"after"
0 0 25 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 2 #">="
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 5 #"pivot"
0 0 25 3 3 #")) "
0 0 14 3 9 #"non-pivot"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 6 #"append"
0 0 25 3 2 #" ("
0 0 14 3 4 #"sort"
0 0 25 3 1 #" "
0 0 14 3 6 #"before"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 5 #"pivot"
0 0 25 3 2 #" ("
0 0 14 3 4 #"sort"
0 0 25 3 1 #" "
0 0 14 3 5 #"after"
0 0 25 3 6 #")))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 4 #"sort"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 4 #"()) "
0 0 22 3 1 #"'"
0 0 25 3 3 #"())"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 4 #"sort"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"4"
0 0 25 3 3 #")) "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"4"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 4 #"sort"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 3 #")) "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 4 #"sort"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 3 #")) "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 4 #"sort"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 3 #")) "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 4 #"sort"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"8"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 3 #")) "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"8"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 13 #"run-all-tests"
0 0 25 3 1 #")"
0           0
