#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 63 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 148 0 211 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 0 1
#"\0"
0 -1 1 #"\0"
0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 1300 0 29 3 10 #"#lang dssl"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 23 #"#|Cem Ozer && Can Aygen"
0 0 17 29 1 #"\n"
0 0 17 3 15 #"HW4: Union-Find"
0 0 17 29 1 #"\n"
0 0 17 3 46 #"Due: Thursday, Nov. 17 at 11:59 PM, via Canvas"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 55 #"** You may work on your own or with one (1) partner. **"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 30 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 25 29 1 #"\n"
0 0 17 3 30 #";;;;; PART I: UNION-FIND ;;;;;"
0 0 25 29 1 #"\n"
0 0 17 3 30 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 39 #"; A UnionFind is [YOUR DEFINITION HERE]"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 25 3 1 #" "
0 0 14 3 14 #"UnionFindEntry"
0 0 25 3 2 #" ("
0 0 14 3 2 #"id"
0 0 25 3 1 #" "
0 0 14 3 4 #"size"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 25 #"; create : N -> UnionFind"
0 0 25 29 1 #"\n"
0 0 17 3 69
(
 #"; Creates a new union-find structure having `size` initially-disjoin"
 #"t"
) 0 0 25 29 1 #"\n"
0 0 17 3 39 #"; sets numbered 0 through `(- size 1)`."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"create"
0 0 25 3 1 #" "
0 0 14 3 4 #"size"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"build-vector"
0 0 25 3 1 #" "
0 0 14 3 4 #"size"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 14 #"UnionFindEntry"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 17 3 61
(
 #";;;; My function is 5 lines using ASL\342\200\231s `build-vector` ;;"
 #";;"
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 23 #"; size : UnionFind -> N"
0 0 25 29 1 #"\n"
0 0 17 3 40 #"; Returns the number of objects in `uf`."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"size"
0 0 25 3 1 #" "
0 0 14 3 2 #"uf"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 6 #"return"
0 0 25 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 25 3 1 #" "
0 0 14 3 2 #"uf"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 32 #";;;; My function is 2 lines ;;;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 4 #"size"
0 0 25 3 2 #" ("
0 0 14 3 6 #"create"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 3 #")) "
0 0 22 3 2 #"12"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 38 #"; same-set? : UnionFind N N -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 64
#"; Returns whether objects `obj1` and `obj2` are in the same set."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"same-set?"
0 0 25 3 1 #" "
0 0 14 3 2 #"uf"
0 0 25 3 1 #" "
0 0 14 3 4 #"obj1"
0 0 25 3 1 #" "
0 0 14 3 4 #"obj2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 14 3 3 #"..."
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 32 #";;;; My function is 2 lines ;;;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 25 #"; find : UnionFind N -> N"
0 0 25 29 1 #"\n"
0 0 17 3 51 #"; Finds the representative (root) object for `obj`."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"find"
0 0 25 3 1 #" "
0 0 14 3 2 #"uf"
0 0 25 3 1 #" "
0 0 14 3 3 #"obj"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 6 #"parent"
0 0 25 3 2 #" ("
0 0 14 3 17 #"UnionFindEntry-id"
0 0 25 3 2 #" ("
0 0 14 3 12 #"uf:get-entry"
0 0 25 3 1 #" "
0 0 14 3 2 #"uf"
0 0 25 3 1 #" "
0 0 14 3 3 #"obj"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"unless"
0 0 25 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 6 #"parent"
0 0 25 3 1 #" "
0 0 14 3 3 #"obj"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 22 #"set-UnionFindEntry-id!"
0 0 25 3 2 #" ("
0 0 14 3 12 #"uf:get-entry"
0 0 25 3 1 #" "
0 0 14 3 2 #"uf"
0 0 25 3 1 #" "
0 0 14 3 3 #"obj"
0 0 25 3 3 #") ("
0 0 14 3 17 #"UnionFindEntry-id"
0 0 25 3 1 #" "
0 0 14 3 6 #"parent"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 25 29 1 #"\n"
0 0 17 3 52 #";;;; My function is 10 lines (using one helper) ;;;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 31 #"; union : UnionFind N N -> Void"
0 0 25 29 1 #"\n"
0 0 17 3 66
#"; Unions the set containing `obj1` with the set containing `obj2`."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"union!"
0 0 25 3 1 #" "
0 0 14 3 2 #"uf"
0 0 25 3 1 #" "
0 0 14 3 4 #"obj1"
0 0 25 3 1 #" "
0 0 14 3 4 #"obj2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 14 3 3 #"..."
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 53 #";;;; My function is 12 lines (using two helpers) ;;;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 25 29 1 #"\n"
0 0 17 3 21 #";;; SUGGESTED HELPERS"
0 0 25 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 59
#";; The suggested helpers below assume a type UnionFindEntry"
0 0 25 29 1 #"\n"
0 0 17 3 58
#";; that contains both the parent id and the weight for one"
0 0 25 29 1 #"\n"
0 0 17 3 10 #";; object."
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 54 #"; uf:reparent! : UnionFindEntry UnionFindEntry -> Void"
0 0 25 29 1 #"\n"
0 0 17 3 68
(
 #"; Sets the parent of `child` to be `parent` and adjusts `parent`\342"
 #"\200\231s"
) 0 0 25 29 1 #"\n"
0 0 17 3 21 #"; weight accordingly."
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"uf:reparent!"
0 0 25 3 1 #" "
0 0 14 3 5 #"child"
0 0 25 3 1 #" "
0 0 14 3 6 #"parent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 14 3 3 #"..."
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 31 #";;; My function is 5 lines ;;;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 46 #"; uf:get-entry : UnionFind N -> UnionFindEntry"
0 0 25 29 1 #"\n"
0 0 17 3 33 #"; Gets the entry for object `ix`."
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"uf:get-entry"
0 0 25 3 1 #" "
0 0 14 3 2 #"uf"
0 0 25 3 1 #" "
0 0 14 3 2 #"ix"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 10 #"vector-ref"
0 0 25 3 1 #" "
0 0 14 3 2 #"uf"
0 0 25 3 1 #" "
0 0 14 3 2 #"ix"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 32 #";;;; My function is 2 lines ;;;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 25 29 1 #"\n"
0 0 17 3 22 #";;; UNION-FIND TESTING"
0 0 25 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 68
#"; The code below gives a clean way to test your union-find code. The"
0 0 25 29 1 #"\n"
0 0 17 3 78
(
 #"; idea is that you write a \342\200\234script\342\200\235 consisting"
 #" of \342\200\234union\342\200\235 commands and"
) 0 0 25 29 1 #"\n"
0 0 17 3 71
(
 #"; \342\200\234same\342\200\235 queries, and then running the script "
 #"returns a list of the"
) 0 0 25 29 1 #"\n"
0 0 17 3 31 #"; results of the 'same queries."
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 31 #"; A UnionFindCommand is one of:"
0 0 25 29 1 #"\n"
0 0 17 3 21 #"; - (list 'union N N)"
0 0 25 29 1 #"\n"
0 0 17 3 20 #"; - (list 'same N N)"
0 0 25 29 1 #"\n"
0 0 17 3 10 #"; Interp.:"
0 0 25 29 1 #"\n"
0 0 17 3 68
#"; - (list 'union m n) means to union the sets containing `m` and `n`"
0 0 25 29 1 #"\n"
0 0 17 3 71
(
 #"; - (list 'same m n) means to check whether `m` and `n` are in the s"
 #"ame"
) 0 0 25 29 1 #"\n"
0 0 17 3 49 #";   set, producing a boolean in the script output"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 49 #"; A UnionFindScript is [List-of UnionFindCommand]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 53 #"; run-script : N UnionFindScript -> [List-of Boolean]"
0 0 25 29 1 #"\n"
0 0 17 3 63
#"; Runs the given script on a new UnionFind universe of size `n`"
0 0 25 29 1 #"\n"
0 0 17 3 40 #"; and returns the list of query results."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"run-script"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #" "
0 0 14 3 6 #"script"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"interpret-script!"
0 0 25 3 2 #" ("
0 0 14 3 6 #"create"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #") "
0 0 14 3 6 #"script"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 68
#"; interpret-script! : UnionFind UnionFindScript -> [List-of Boolean]"
0 0 25 29 1 #"\n"
0 0 17 3 73
(
 #"; Runs the given script on a the given UnionFind universe and return"
 #"s the"
) 0 0 25 29 1 #"\n"
0 0 17 3 24 #"; list of query results."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 17 #"interpret-script!"
0 0 25 3 1 #" "
0 0 14 3 2 #"uf"
0 0 25 3 1 #" "
0 0 14 3 6 #"script"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 17 #"interpret-command"
0 0 25 3 1 #" "
0 0 14 3 7 #"command"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 7 #"command"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 5 #"union"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 6 #"union!"
0 0 25 3 1 #" "
0 0 14 3 2 #"uf"
0 0 25 3 2 #" ("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 7 #"command"
0 0 25 3 3 #") ("
0 0 14 3 5 #"third"
0 0 25 3 1 #" "
0 0 14 3 7 #"command"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 17 #"interpret-script!"
0 0 25 3 1 #" "
0 0 14 3 2 #"uf"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 6 #"script"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 15 3 5 #"local"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"             [("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 2 #" ("
0 0 14 3 9 #"same-set?"
0 0 25 3 1 #" "
0 0 14 3 2 #"uf"
0 0 25 3 2 #" ("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 7 #"command"
0 0 25 3 3 #") ("
0 0 14 3 5 #"third"
0 0 25 3 1 #" "
0 0 14 3 7 #"command"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 2 #" ("
0 0 14 3 17 #"interpret-script!"
0 0 25 3 1 #" "
0 0 14 3 2 #"uf"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 6 #"script"
0 0 25 3 7 #"))))))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 6 #"script"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 25 3 2 #"()"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 17 #"interpret-command"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 6 #"script"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 25 #"; Now some example tests:"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 13 #"(check-expect"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 10 #"run-script"
0 0 17 3 1 #" "
0 0 17 3 2 #"10"
0 0 17 3 1 #" "
0 0 17 3 4 #"'())"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #" "
0 0 17 3 4 #"'())"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 13 #"(check-expect"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 10 #"run-script"
0 0 17 3 3 #" 10"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"   "
0 0 17 3 1 #"'"
0 0 17 3 2 #"(("
0 0 17 3 4 #"same"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 2 #"1)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 6 #"     ("
0 0 17 3 4 #"same"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 2 #"2)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 6 #"     ("
0 0 17 3 4 #"same"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 4 #"3)))"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 6 #"#false"
0 0 17 3 1 #" "
0 0 17 3 6 #"#false"
0 0 17 3 1 #" "
0 0 17 3 8 #"#false))"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 13 #"(check-expect"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 10 #"run-script"
0 0 17 3 3 #" 10"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"   "
0 0 17 3 1 #"'"
0 0 17 3 2 #"(("
0 0 17 3 4 #"same"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 2 #"1)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 6 #"     ("
0 0 17 3 5 #"union"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 2 #"1)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 6 #"     ("
0 0 17 3 4 #"same"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 2 #"1)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 6 #"     ("
0 0 17 3 5 #"union"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 2 #"2)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 6 #"     ("
0 0 17 3 5 #"union"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 2 #"3)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 6 #"     ("
0 0 17 3 4 #"same"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 2 #"3)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 6 #"     ("
0 0 17 3 4 #"same"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 4 #"4)))"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 6 #"#false"
0 0 17 3 1 #" "
0 0 17 3 5 #"#true"
0 0 17 3 1 #" "
0 0 17 3 5 #"#true"
0 0 17 3 1 #" "
0 0 17 3 8 #"#false))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 44 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 25 29 1 #"\n"
0 0 17 3 46 #";;;;; PART II: KRUSKAL\342\200\231S MST ALGORITHM ;;;;;"
0 0 25 29 1 #"\n"
0 0 17 3 44 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 35 #";; kruskal-mst : WUGraph -> WUGraph"
0 0 25 29 1 #"\n"
0 0 17 3 72
(
 #";; Returns the minimum spanning forest for a given graph, represente"
 #"d as"
) 0 0 25 29 1 #"\n"
0 0 17 3 17 #";; another graph."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"kruskal-mst"
0 0 25 3 1 #" "
0 0 14 3 1 #"g"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 14 3 3 #"..."
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 64
#";;;; my function is 14 lines, using several helpers (below) ;;;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 25 29 1 #"\n"
0 0 17 3 39 #";;; KRUSKAL HELPERS YOU MAY FIND USEFUL"
0 0 25 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 71
(
 #";; get-all-edges/increasing : WUGraph -> [List-of (list Vertex Verte"
 #"x)]"
) 0 0 25 29 1 #"\n"
0 0 17 3 73
(
 #";; Gets a list of all the edges in the graph sorted by increasing we"
 #"ight;"
) 0 0 25 29 1 #"\n"
0 0 17 3 57 #";; includes only one (arbitrary) direction for each edge."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 24 #"get-all-edges/increasing"
0 0 25 3 1 #" "
0 0 14 3 1 #"g"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 14 3 3 #"..."
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 32 #";;;; my function is 4 lines ;;;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 60
#";; get-all-edges : WUGraph -> [List-of (list Vertex Vertex)]"
0 0 25 29 1 #"\n"
0 0 17 3 71
(
 #";; Gets all the edges in a graph as a list of 2-element lists; inclu"
 #"des"
) 0 0 25 29 1 #"\n"
0 0 17 3 48 #";; only one (arbitrary) direction for each edge."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"get-all-edges"
0 0 25 3 1 #" "
0 0 14 3 1 #"g"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 14 3 3 #"..."
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 33 #";;;; my function is 13 lines ;;;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 49 #";; heap-sort : [Ord X] [List-of X] -> [List-of X]"
0 0 25 29 1 #"\n"
0 0 17 3 54 #";; Sorts a list based on the given less-than function."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"heap-sort"
0 0 25 3 1 #" "
0 0 14 3 3 #"lt?"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 14 3 3 #"..."
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 33 #";;;; my function is 10 lines ;;;;"
0 0 25 29 1 #"\n"
0 0 17 3 72
(
 #";; [Impl. note: a heap sort works by inserting every element into a "
 #"heap"
) 0 0 25 29 1 #"\n"
0 0 17 3 71
(
 #";; and then removing every element, which yields the elements in sor"
 #"ted"
) 0 0 25 29 1 #"\n"
0 0 17 3 62
#";; order. You may of course use a different sort if you wish.]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 34 #";; pq-extract-min! : [Heap X] -> X"
0 0 25 29 1 #"\n"
0 0 17 3 48 #";; Removes and returns the minimum heap element."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"pq-extract-min!"
0 0 25 3 1 #" "
0 0 14 3 4 #"heap"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 14 3 3 #"..."
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 32 #";;;; my function is 4 lines ;;;;"
0 0 25 29 1 #"\n"
0 0 17 3 5 #";;;;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 25 29 1 #"\n"
0 0 17 3 15 #";;; MST TESTING"
0 0 25 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 67
#";; The following function may be convenient for creating graphs for"
0 0 25 29 1 #"\n"
0 0 17 3 64
#";; tests. It uses the graph API from HW2, so if you have defined"
0 0 25 29 1 #"\n"
0 0 17 3 56 #";; make-graph and set-edge! correctly then it will work."
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 67
#";; build-graph : N [List-of (list Vertex Vertex Weight)] -> WUGraph"
0 0 25 29 1 #"\n"
0 0 17 3 64
#";; Returns a new graph of n vertices containing the given edges."
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 11 #"build-graph"
0 0 17 3 1 #" "
0 0 17 3 1 #"n"
0 0 17 3 1 #" "
0 0 17 3 6 #"edges)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"  ("
0 0 17 3 5 #"local"
0 0 17 3 3 #" [("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 9 #"new-graph"
0 0 17 3 2 #" ("
0 0 17 3 10 #"make-graph"
0 0 17 3 1 #" "
0 0 17 3 4 #"n))]"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 10 #"    (begin"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 7 #"      ("
0 0 17 3 3 #"map"
0 0 17 3 2 #" ("
0 0 17 3 6 #"lambda"
0 0 17 3 2 #" ("
0 0 17 3 5 #"edge)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 14 #"             ("
0 0 17 3 9 #"set-edge!"
0 0 17 3 1 #" "
0 0 17 3 9 #"new-graph"
0 0 17 3 2 #" ("
0 0 17 3 5 #"first"
0 0 17 3 1 #" "
0 0 17 3 4 #"edge"
0 0 17 3 3 #") ("
0 0 17 3 6 #"second"
0 0 17 3 1 #" "
0 0 17 3 4 #"edge"
0 0 17 3 3 #") ("
0 0 17 3 5 #"third"
0 0 17 3 1 #" "
0 0 17 3 7 #"edge)))"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 11 #"           "
0 0 17 3 6 #"edges)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 6 #"      "
0 0 17 3 12 #"new-graph)))"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 16 #" EXAMPLE-GRAPH-0"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"  ("
0 0 17 3 11 #"build-graph"
0 0 17 3 2 #" 6"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 15 #"               "
0 0 17 3 1 #"'"
0 0 17 3 2 #"(("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 2 #"5)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 18 #"                 ("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 2 #"7)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 18 #"                 ("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 2 #"2)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 18 #"                 ("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 2 #"9)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 18 #"                 ("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"5"
0 0 17 3 1 #" "
0 0 17 3 2 #"6)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 18 #"                 ("
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"5"
0 0 17 3 1 #" "
0 0 17 3 2 #"0)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 18 #"                 ("
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 5 #"1))))"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 10 #"graph-size"
0 0 17 3 1 #" "
0 0 17 3 15 #"EXAMPLE-GRAPH-0"
0 0 17 3 2 #") "
0 0 17 3 2 #"6)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 8 #"get-edge"
0 0 17 3 1 #" "
0 0 17 3 15 #"EXAMPLE-GRAPH-0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 2 #") "
0 0 17 3 2 #"5)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 8 #"get-edge"
0 0 17 3 1 #" "
0 0 17 3 15 #"EXAMPLE-GRAPH-0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 2 #") "
0 0 17 3 2 #"5)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 8 #"get-edge"
0 0 17 3 1 #" "
0 0 17 3 15 #"EXAMPLE-GRAPH-0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 2 #") "
0 0 17 3 2 #"7)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 8 #"get-edge"
0 0 17 3 1 #" "
0 0 17 3 15 #"EXAMPLE-GRAPH-0"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 2 #") "
0 0 17 3 2 #"7)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 8 #"get-edge"
0 0 17 3 1 #" "
0 0 17 3 15 #"EXAMPLE-GRAPH-0"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"5"
0 0 17 3 2 #") "
0 0 17 3 2 #"0)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 8 #"get-edge"
0 0 17 3 1 #" "
0 0 17 3 15 #"EXAMPLE-GRAPH-0"
0 0 17 3 1 #" "
0 0 17 3 1 #"5"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 2 #") "
0 0 17 3 2 #"0)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 8 #"get-edge"
0 0 17 3 1 #" "
0 0 17 3 15 #"EXAMPLE-GRAPH-0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 2 #") "
0 0 17 3 7 #"#false)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 8 #"get-edge"
0 0 17 3 1 #" "
0 0 17 3 15 #"EXAMPLE-GRAPH-0"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 2 #") "
0 0 17 3 7 #"#false)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 71
(
 #";; Note that my get-adjacent retur"
 #"ns a sorted list, but yours doesn\342\200\231t"
) 0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 74
(
 #";; need to---and if it doesn\342\200\231t then you will have to modi"
 #"fy these tests."
) 0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 12 #"get-adjacent"
0 0 17 3 1 #" "
0 0 17 3 15 #"EXAMPLE-GRAPH-0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 2 #") "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 3 #"3))"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 12 #"get-adjacent"
0 0 17 3 1 #" "
0 0 17 3 15 #"EXAMPLE-GRAPH-0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 2 #") "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 3 #"5))"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 12 #"get-adjacent"
0 0 17 3 1 #" "
0 0 17 3 15 #"EXAMPLE-GRAPH-0"
0 0 17 3 1 #" "
0 0 17 3 1 #"5"
0 0 17 3 2 #") "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 3 #"3))"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 71
(
 #";; This graph looks like a \"wagon wheel\" with six spokes emanating"
 #" from"
) 0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 68
#";; vertex 6 in the center. The weights of the spokes are mostly less"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 69
(
 #";; than the weights along the perimeter, except that 3 is closer to "
 #"2"
) 0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 72
(
 #";; than it is to 6. Thus, the resulting MST is all spokes except tha"
 #"t it"
) 0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 36 #";; connects 3 to 2 rather than to 6."
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 16 #" EXAMPLE-GRAPH-1"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"  ("
0 0 17 3 11 #"build-graph"
0 0 17 3 2 #" 7"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 15 #"               "
0 0 17 3 1 #"'"
0 0 17 3 2 #"(("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 2 #"3)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 18 #"                 ("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 2 #"3)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 18 #"                 ("
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 2 #"1)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 18 #"                 ("
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 2 #"3)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 18 #"                 ("
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 1 #"5"
0 0 17 3 1 #" "
0 0 17 3 2 #"3)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 18 #"                 ("
0 0 17 3 1 #"6"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 2 #"2)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 18 #"                 ("
0 0 17 3 1 #"6"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 2 #"2)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 18 #"                 ("
0 0 17 3 1 #"6"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 2 #"2)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 18 #"                 ("
0 0 17 3 1 #"6"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 2 #"3)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 18 #"                 ("
0 0 17 3 1 #"6"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 2 #"2)"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 18 #"                 ("
0 0 17 3 1 #"6"
0 0 17 3 1 #" "
0 0 17 3 1 #"5"
0 0 17 3 1 #" "
0 0 17 3 5 #"2))))"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 13 #"EXAMPLE-MST-1"
0 0 17 3 2 #" ("
0 0 17 3 11 #"kruskal-mst"
0 0 17 3 1 #" "
0 0 17 3 17 #"EXAMPLE-GRAPH-1))"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 12 #"get-adjacent"
0 0 17 3 1 #" "
0 0 17 3 13 #"EXAMPLE-MST-1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 2 #") "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 3 #"6))"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 12 #"get-adjacent"
0 0 17 3 1 #" "
0 0 17 3 13 #"EXAMPLE-MST-1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 2 #") "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 3 #"6))"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 12 #"get-adjacent"
0 0 17 3 1 #" "
0 0 17 3 13 #"EXAMPLE-MST-1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 2 #") "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 3 #"6))"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 12 #"get-adjacent"
0 0 17 3 1 #" "
0 0 17 3 13 #"EXAMPLE-MST-1"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 2 #") "
0 0 17 3 1 #"'"
0 0 17 3 4 #"(2))"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 12 #"get-adjacent"
0 0 17 3 1 #" "
0 0 17 3 13 #"EXAMPLE-MST-1"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 2 #") "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 3 #"6))"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 12 #"get-adjacent"
0 0 17 3 1 #" "
0 0 17 3 13 #"EXAMPLE-MST-1"
0 0 17 3 1 #" "
0 0 17 3 1 #"5"
0 0 17 3 2 #") "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 3 #"6))"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 12 #"get-adjacent"
0 0 17 3 1 #" "
0 0 17 3 13 #"EXAMPLE-MST-1"
0 0 17 3 1 #" "
0 0 17 3 1 #"6"
0 0 17 3 2 #") "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 3 #"5))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 43 #";; You probably need more tests than these."
0           0
